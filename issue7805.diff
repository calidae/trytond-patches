diff -r b56a5b6d059d trytond/trytond/modules/stock/move.py
--- a/trytond/trytond/modules/stock/move.py	Wed Oct 23 10:24:05 2019 +0200
+++ b/trytond/trytond/modules/stock/move.py	Wed Oct 23 10:35:18 2019 +0200
@@ -912,7 +912,8 @@

     @classmethod
     def compute_quantities_query(cls, location_ids, with_childs=False,
-            grouping=('product',), grouping_filter=None):
+            grouping=('product',), grouping_filter=None,
+            quantity_field='internal_quantity'):
         """
         Prepare a query object to compute for each location and product the
         stock quantity in the default uom of the product.
@@ -930,6 +931,8 @@
             stock_skip_warehouse: if set, quantities on a warehouse are no more
                 quantities of all child locations but quantities of the storage
                 zone.
+            quantity_field is the name of the field containing the quantity to
+                    be aggregated.
         If with_childs, it computes also for child locations.
         grouping is a tuple of Move (or Product if prefixed by 'product.')
             field names and defines how stock moves are grouped.
@@ -982,7 +985,7 @@
         if use_product:
             product = Product.__table__()
             columns = ['id', 'state', 'effective_date', 'planned_date',
-            'internal_quantity', 'from_location', 'to_location', 'company']
+            quantity_field, 'from_location', 'to_location', 'company']
             columns += [c for c in grouping if c not in columns]
             columns = [get_column(c, move, product) for c in columns]
             move = (move
@@ -996,7 +999,7 @@
             period_table = Period.__table__()
             if use_product:
                 product_cache = Product.__table__()
-                columns = ['internal_quantity', 'period', 'location']
+                columns = [quantity_field, 'period', 'location']
                 columns += [c for c in grouping if c not in columns]
                 columns = [get_column(c, period_cache, product_cache)
                     for c in columns]
@@ -1017,7 +1020,7 @@
             to_location = Location.__table__()
             to_parent_location = Location.__table__()
             columns = ['id', 'state', 'effective_date', 'planned_date',
-                'internal_quantity', 'company']
+                quantity_field, 'company']
             columns += [c for c in grouping if c not in columns]
             columns = [Column(move, c).as_(c) for c in columns]

@@ -1072,7 +1075,7 @@
             if PeriodCache:
                 location = Location.__table__()
                 parent_location = Location.__table__()
-                columns = ['internal_quantity', 'period'] + list(grouping)
+                columns = [quantity_field, 'period'] + list(grouping)
                 columns = [Column(period_cache, c).as_(c) for c in columns]
                 period_cache = Union(
                     period_cache.select(
@@ -1270,7 +1273,7 @@
         move_keys_alias = [Column(move, key).as_(key) for key in grouping]
         move_keys = [Column(move, key) for key in grouping]
         query = move.select(move.to_location.as_('location'),
-            Sum(move.internal_quantity).as_('quantity'),
+            Sum(getattr(move, quantity_field)).as_('quantity'),
             *move_keys_alias,
             where=state_date_clause_in
             & where
@@ -1279,7 +1282,7 @@
             & dest_clause_from,
             group_by=[move.to_location] + move_keys)
         query = Union(query, move.select(move.from_location.as_('location'),
-                (-Sum(move.internal_quantity)).as_('quantity'),
+                (-Sum(getattr(move, quantity_field))).as_('quantity'),
                 *move_keys_alias,
                 where=state_date_clause_out
                 & where
@@ -1293,7 +1296,7 @@
                 for key in grouping]
             query = Union(query, from_period.select(
                     period_cache.location.as_('location'),
-                    period_cache.internal_quantity.as_('quantity'),
+                    getattr(period_cache, quantity_field).as_('quantity'),
                     *period_keys,
                     where=(period_cache.period
                         == (period.id if period else None))
@@ -1402,7 +1405,7 @@
         for key, quantity in quantities.items():
             location = key[0]
             uom = default_uom[id_getter(key)]
-            quantities[key] = uom.round(quantity)
+            quantities[key] = uom.round(quantity) if quantity else 0.0

         return quantities
